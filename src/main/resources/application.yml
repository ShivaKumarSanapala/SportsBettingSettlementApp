server:
  port: 8080

spring:
  application:
    name: sports-betting-settlement
  
  # H2 Database Configuration
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: sports-betting-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: com.sportygroup.model.EventOutcome
      auto-offset-reset: earliest

# RocketMQ Configuration
rocketmq:
  name-server: localhost:9876
  producer:
    group: sports-betting-producer-group
  consumer:
    group: sports-betting-consumer-group

# Application Configuration
app:
  kafka:
    topics:
      event-outcomes: event-outcomes
  rocketmq:
    topics:
      bet-settlements: bet-settlements
  mock:
    rocketmq: true  # Set to true to mock RocketMQ if setup is complex

# Logging Configuration
logging:
  level:
    com.sportygroup: DEBUG
    org.springframework.kafka: INFO
    org.apache.rocketmq: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
